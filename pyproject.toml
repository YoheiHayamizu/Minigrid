# Package ######################################################################
[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "minigrid"
version = "0.1.0"  # Add your project version here
description = "Minimalistic gridworld reinforcement learning environments."
authors = ["Farama Foundation <contact@farama.org>"]
license = "MIT License"
readme = "README.md"
homepage = "https://farama.org"
repository = "https://minigrid.farama.org/"
documentation = "https://minigrid.farama.org/"
keywords = ["Memory", "Environment", "Agent", "RL", "Gymnasium"]
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    'Intended Audience :: Science/Research',
    'Topic :: Scientific/Engineering :: Artificial Intelligence',
]

[tool.poetry.dependencies]
python = "^3.8"
numpy = "^1.24.4"
gymnasium = "^0.29.1"
pygame = "^2.4.0"

[tool.poetry.dev-dependencies]
pytest = "^7.0.1"
pytest-mock = "^3.10.0"
matplotlib = "^3.0"
networkx = "*"
imageio = "^2.31.1"

[tool.poetry.plugins."gymnasium.envs"]
__root__ = "minigrid.__init__:register_minigrid_envs"

[tool.poetry.scripts]  # If you have any scripts to include
[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
include = ["minigrid*"]

# Linters and Test tools #######################################################

[tool.black]
safe = true

[tool.isort]
atomic = true
profile = "black"
append_only = true
src_paths = ["minigrid", "tests"]
add_imports = [ "from __future__ import annotations" ]

[tool.pyright]
include = [
    "minigrid/**",
]

exclude = [
    "**/node_modules",
    "**/__pycache__",
]

strict = []

typeCheckingMode = "basic"
pythonVersion = "3.8"
typeshedPath = "typeshed"
enableTypeIgnoreComments = true

# This is required as the CI pre-commit does not download the module (i.e. numpy)
#   Therefore, we have to ignore missing imports
reportMissingImports = "none"

reportUnknownMemberType = "none"
reportUnknownParameterType = "none"
reportUnknownVariableType = "none"
reportUnknownArgumentType = "none"
reportPrivateUsage = "warning"
reportUntypedFunctionDecorator = "none"
reportMissingTypeStubs = false
reportUnboundVariable = "warning"
reportGeneralTypeIssues ="none"
reportPrivateImportUsage = "none"

[tool.pytest.ini_options]
filterwarnings = ['ignore:.*step API.*:DeprecationWarning'] # TODO: to be removed when old step API is removed
